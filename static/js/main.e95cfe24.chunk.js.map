{"version":3,"sources":["components/common/Topbar.tsx","components/UI/Button.tsx","components/common/Categorizer.tsx","components/common/QuizPanel.tsx","components/common/QuizCard.tsx","components/pages/Home.tsx","components/pages/Quiz.tsx","hooks/useAxiosQuiz.ts","components/pages/Results.tsx","App.tsx","index.tsx"],"names":["Topbar","className","Button","children","onClick","options","value","label","Categorizer","useState","selectedCategory","setSelectedCategory","questionsCount","setQuestionsCount","onSubmit","e","preventDefault","onChange","type","max","min","target","to","QuizPanel","quizData","questionNum","setQuestionNum","setOptions","isAnsweredCorrect","setIsAnsweredCorrect","isAnswered","setIsAnswered","score","setScore","questions","results","correctAnswer","correct_answer","history","useHistory","useEffect","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","incorrect_answers","onSelectOption","selectedOption","increaseScore","prev","dangerouslySetInnerHTML","__html","question","map","option","isCorrectAnswer","push","QuizCard","Home","Quiz","useParams","amount","category","isLoading","setIsLoading","setQuizData","error","setError","fetchData","a","axios","get","response","data","useAxiosQuiz","Results","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e95cfe24.chunk.js","sourcesContent":["import { FC } from \"react\";\r\n\r\nexport const Topbar: FC = () => {\r\n  return (\r\n    <div className=\"fixed top-0 w-full flex justify-between items-center p-5 text-2xl lg:text-3xl text-white bg-gray-900\">\r\n      Quizzer\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\n\r\nexport const Button: FC<ButtonProps> = ({ children, onClick = () => {} }) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className=\"bg-gray-600 text-white p-3 rounded-lg text-md\"\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\ninterface ButtonProps {\r\n  onClick?: () => void;\r\n}\r\n","import { SyntheticEvent, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select, { SingleValue } from \"react-select\";\r\nimport { Button } from \"../UI\";\r\n\r\nconst options: Option[] = [\r\n  { value: \"18\", label: \"Computer Science\" },\r\n  { value: \"31\", label: \"Anime & Manga\" },\r\n  { value: \"19\", label: \"Mathematics\" },\r\n];\r\n\r\nexport const Categorizer = () => {\r\n  const [selectedCategory, setSelectedCategory] = useState<SingleValue<Option>>(\r\n    options[0]\r\n  );\r\n  const [questionsCount, setQuestionsCount] = useState(\"10\");\r\n  const submitHandler = (e: SyntheticEvent) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"w-full flex flex-col items-center  gap-7 bg-gray-200 px-10 py-10 rounded-lg\"\r\n      onSubmit={submitHandler}\r\n    >\r\n      <div className=\"flex gap-8 justify-between w-full\">\r\n        <p>Category</p>\r\n        <Select\r\n          options={options}\r\n          className=\"w-10/12\"\r\n          value={selectedCategory}\r\n          onChange={(value) => {\r\n            setSelectedCategory(value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"flex gap-8 justify-between w-full\">\r\n        <p>No of Questions</p>\r\n        <input\r\n          type=\"number\"\r\n          max={50}\r\n          min={10}\r\n          value={questionsCount}\r\n          onChange={(e) => {\r\n            setQuestionsCount(e.target.value);\r\n          }}\r\n          className=\"border-2 h-full w-10/12 px-2 py-1\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <Button>\r\n          <Link to={`/quiz/${selectedCategory?.value}/${questionsCount}`}>\r\n            Take Quiz\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\ninterface Option {\r\n  value: string;\r\n  label: string;\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { QuizCard } from \".\";\r\nimport { QuizData } from \"../../hooks/useAxiosQuiz\";\r\nimport { Button } from \"../UI\";\r\n\r\nexport const QuizPanel = ({ quizData }: QuizPanelProps) => {\r\n  const [questionNum, setQuestionNum] = useState(0);\r\n  const [options, setOptions] = useState<string[]>([]);\r\n  const [isAnsweredCorrect, setIsAnsweredCorrect] = useState(false);\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const { results: questions } = quizData;\r\n  const correctAnswer = questions[questionNum].correct_answer;\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setOptions(\r\n      shuffle([\r\n        ...questions[questionNum]?.incorrect_answers,\r\n        questions[questionNum].correct_answer,\r\n      ])\r\n    );\r\n  }, [questionNum, questions]);\r\n\r\n  const onSelectOption = (selectedOption: string) => {\r\n    if (selectedOption === correctAnswer && !isAnswered) {\r\n      setIsAnsweredCorrect(true);\r\n      questionNum !== questions.length - 1 && increaseScore();\r\n    }\r\n    setIsAnswered(true);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    questionNum !== questions.length - 1 && setQuestionNum((prev) => prev + 1);\r\n    setIsAnswered(false);\r\n    setIsAnsweredCorrect(false);\r\n  };\r\n\r\n  const increaseScore = () => {\r\n    !isAnswered && setScore((prev) => prev + 1);\r\n  };\r\n\r\n  const showScores = () => {\r\n    history.push(`/results/${score}/${questions.length}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mx-auto w-10/12 flex flex-col mt-32 bg-gray-900 rounded py-6 px-10 text-white\">\r\n      <div className=\"bg-gray-600 p-3 mb-3 rounded-md text-lg\">\r\n        <p\r\n          dangerouslySetInnerHTML={{ __html: questions[questionNum].question }}\r\n        />\r\n      </div>\r\n      <div>\r\n        {options.map((option) => (\r\n          <QuizCard\r\n            key={option}\r\n            option={option}\r\n            onSelectOption={onSelectOption}\r\n            isCorrectAnswer={correctAnswer === option}\r\n            isAnswered={isAnswered}\r\n            isAnsweredCorrect={isAnsweredCorrect}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"text-right\">\r\n        {questionNum !== questions.length - 1 ? (\r\n          <div>\r\n            <Button onClick={nextQuestion}>Next</Button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Button onClick={showScores}>Show Scores</Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport interface QuizPanelProps {\r\n  quizData: QuizData;\r\n}\r\n\r\nfunction shuffle(array: any[]) {\r\n  let currentIndex = array.length,\r\n    randomIndex;\r\n  while (currentIndex !== 0) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport const QuizCard = ({\r\n  option,\r\n  onSelectOption,\r\n  isCorrectAnswer,\r\n  isAnswered,\r\n  isAnsweredCorrect,\r\n}: QuizCardProps) => {\r\n  function getClassNames() {\r\n    if (!isAnsweredCorrect && isCorrectAnswer && isAnswered) {\r\n      return \" bg-red-600 \";\r\n    } else if (isCorrectAnswer && isAnswered) {\r\n      return \" bg-green-400 \";\r\n    }\r\n  }\r\n  return (\r\n    <div\r\n      className={`bg-gray-500 rounded my-2 p-3 text-lg transform transition duration-100 ${getClassNames()}\r\n      }`}\r\n      onClick={() => {\r\n        onSelectOption(option);\r\n      }}\r\n    >\r\n      <p dangerouslySetInnerHTML={{ __html: option }} />\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface QuizCardProps {\r\n  option: string;\r\n  onSelectOption: (prevOption: string) => void;\r\n  isCorrectAnswer: boolean;\r\n  isAnswered: boolean;\r\n  isAnsweredCorrect: boolean;\r\n}\r\n","import { Categorizer } from \"../common\";\r\nexport const Home = () => {\r\n  return (\r\n    <div className=\"mx-auto w-9/12 py-8\">\r\n      <Categorizer />\r\n    </div>\r\n  );\r\n};\r\n","import { useParams } from \"react-router-dom\";\r\nimport { useAxiosQuiz } from \"../../hooks/useAxiosQuiz\";\r\nimport { QuizPanel } from \"../common\";\r\n\r\nexport const Quiz = () => {\r\n  const { amount, category } =\r\n    useParams<{ amount: string; category: string }>();\r\n  const [isLoading, quizData, error] = useAxiosQuiz(amount, category);\r\n\r\n  if (isLoading) {\r\n    return <p>Loading</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error</p>;\r\n  }\r\n  if (quizData.results)\r\n    return (\r\n      <div>\r\n        <QuizPanel quizData={quizData} />\r\n      </div>\r\n    );\r\n  return <></>;\r\n};\r\n","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nexport function useAxiosQuiz(\r\n  amount: string,\r\n  category: string\r\n): [boolean, QuizData, boolean] {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [quizData, setQuizData] = useState({});\r\n  const [error, setError] = useState<any>();\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `https://opentdb.com/api.php?amount=${amount}&category=${category}&type=multiple`\r\n        );\r\n        const data = await response?.data;\r\n        setQuizData(data);\r\n      } catch (error) {\r\n        setError(error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [amount, category]);\r\n\r\n  return [isLoading, quizData as QuizData, error];\r\n}\r\n\r\nexport interface Quiz {\r\n  category: string;\r\n  type: string;\r\n  difficulty: string;\r\n  question: string;\r\n  correct_answer: string;\r\n  incorrect_answers: string[];\r\n  chosen_answer?: boolean;\r\n  options: string[];\r\n}\r\n\r\nexport interface QuizData {\r\n  response_code: number;\r\n  results: Quiz[];\r\n}\r\n\r\nfunction shuffle(array: any[]) {\r\n  let currentIndex = array.length,\r\n    randomIndex;\r\n  while (currentIndex !== 0) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n}\r\n","import React from \"react\";\r\n\r\nexport const Results = () => {\r\n  return <div></div>;\r\n};\r\n","import { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport { Topbar } from \"./components/common\";\nimport { Home, Quiz, Results } from \"./components/pages\";\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <Topbar />\n      <div className=\"mt-20\">\n        <BrowserRouter>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/quiz/:category/:amount\">\n              <Quiz />\n            </Route>\n            <Route path=\"/results/:score/:total_qn\">\n              <Results />\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}